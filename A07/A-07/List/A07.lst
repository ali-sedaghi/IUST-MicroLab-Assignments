
AVRASM ver. 2.1.30  C:\Users\ali_s\Desktop\AVR Projects\A-07\List\A07.asm Sat Nov 27 11:17:54 2021

C:\Users\ali_s\Desktop\AVR Projects\A-07\List\A07.asm(1072): warning: Register r5 already defined by the .DEF directive
C:\Users\ali_s\Desktop\AVR Projects\A-07\List\A07.asm(1073): warning: Register r4 already defined by the .DEF directive
C:\Users\ali_s\Desktop\AVR Projects\A-07\List\A07.asm(1074): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0043 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 4d4c
00002b 3533
00002c 5320
00002d 6e65      	.DB  0x4C,0x4D,0x33,0x35,0x20,0x53,0x65,0x6E
00002e 6f73
00002f 0072
000030 6554
000031 706d      	.DB  0x73,0x6F,0x72,0x0,0x54,0x65,0x6D,0x70
000032 3a20
000033 4300
C:\Users\ali_s\Desktop\AVR Projects\A-07\List\A07.asm(1108): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x20,0x3A,0x0,0x43,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 000c      	.DW  0x0C
000037 0260      	.DW  _0x6
000038 0054      	.DW  _0x0*2
                 
000039 0007      	.DW  0x07
00003a 026c      	.DW  _0x6+12
00003b 0060      	.DW  _0x0*2+12
                 
00003c 0002      	.DW  0x02
00003d 0273      	.DW  _0x6+19
00003e 0067      	.DW  _0x0*2+19
                 
00003f 0002      	.DW  0x02
000040 0275      	.DW  __base_y_G100
000041 006a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bffb      	OUT  GICR,R31
000048 bfeb      	OUT  GICR,R30
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004a e1f8      	LDI  R31,0x18
00004b bdf1      	OUT  WDTCR,R31
00004c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004d e08d      	LDI  R24,(14-2)+1
00004e e0a2      	LDI  R26,2
00004f 27bb      	CLR  R27
                 __CLEAR_REG:
000050 93ed      	ST   X+,R30
000051 958a      	DEC  R24
000052 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000053 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000054 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000055 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000056 93ed      	ST   X+,R30
000057 9701      	SBIW R24,1
000058 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000059 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005b 9185      	LPM  R24,Z+
00005c 9195      	LPM  R25,Z+
00005d 9700      	SBIW R24,0
00005e f061      	BREQ __GLOBAL_INI_END
00005f 91a5      	LPM  R26,Z+
000060 91b5      	LPM  R27,Z+
000061 9005      	LPM  R0,Z+
000062 9015      	LPM  R1,Z+
000063 01bf      	MOVW R22,R30
000064 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000065 9005      	LPM  R0,Z+
000066 920d      	ST   X+,R0
000067 9701      	SBIW R24,1
000068 f7e1      	BRNE __GLOBAL_INI_LOOP
000069 01fb      	MOVW R30,R22
00006a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006c bfed      	OUT  SPL,R30
00006d e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000070 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000071 940c 00af 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;// Ali Sedaghi
                 ;// 97521378
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;unsigned char int_to_char(int x) {
                 ; 0000 0008 unsigned char int_to_char(int x) {
                 
                 	.CSEG
                 _int_to_char:
                 ; 0000 0009 	return x + '0';
000073 93ba      	ST   -Y,R27
000074 93aa      	ST   -Y,R26
                 ;	x -> Y+0
000075 81e8      	LD   R30,Y
000076 5de0      	SUBI R30,-LOW(48)
000077 c0a1      	RJMP _0x2020002
                 ; 0000 000A }
                 ;
                 ;void put_on_lcd(int value, int c) {
                 ; 0000 000C void put_on_lcd(int value, int c) {
                 _put_on_lcd:
                 ; 0000 000D 	unsigned int r = 1;
                 ; 0000 000E 	unsigned char tens = int_to_char(value / 10);
                 ; 0000 000F 	unsigned char ones = int_to_char(value % 10);
                 ; 0000 0010 	lcd_gotoxy(c, r);
000078 93ba      	ST   -Y,R27
000079 93aa      	ST   -Y,R26
00007a 940e 02b5 	CALL __SAVELOCR4
                 ;	value -> Y+6
                 ;	c -> Y+4
                 ;	r -> R16,R17
                 ;	tens -> R19
                 ;	ones -> R18
                +
00007c e001     +LDI R16 , LOW ( 1 )
00007d e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
00007e 81ae      	LDD  R26,Y+6
00007f 81bf      	LDD  R27,Y+6+1
000080 e0ea      	LDI  R30,LOW(10)
000081 e0f0      	LDI  R31,HIGH(10)
000082 940e 0294 	CALL __DIVW21
000084 01df      	MOVW R26,R30
000085 dfed      	RCALL _int_to_char
000086 2f3e      	MOV  R19,R30
000087 81ae      	LDD  R26,Y+6
000088 81bf      	LDD  R27,Y+6+1
000089 e0ea      	LDI  R30,LOW(10)
00008a e0f0      	LDI  R31,HIGH(10)
00008b 940e 0299 	CALL __MODW21
00008d 01df      	MOVW R26,R30
00008e dfe4      	RCALL _int_to_char
00008f 2f2e      	MOV  R18,R30
000090 81ec      	LDD  R30,Y+4
000091 93ea      	ST   -Y,R30
000092 2fa0      	MOV  R26,R16
000093 d07a      	RCALL _lcd_gotoxy
                 ; 0000 0011 	lcd_putchar(tens);
000094 2fa3      	MOV  R26,R19
000095 d093      	RCALL _lcd_putchar
                 ; 0000 0012 	lcd_gotoxy(c + 1, r);
000096 81ec      	LDD  R30,Y+4
000097 5fef      	SUBI R30,-LOW(1)
000098 93ea      	ST   -Y,R30
000099 2fa0      	MOV  R26,R16
00009a d073      	RCALL _lcd_gotoxy
                 ; 0000 0013 	lcd_putchar(ones);
00009b 2fa2      	MOV  R26,R18
00009c d08c      	RCALL _lcd_putchar
                 ; 0000 0014 }
00009d 940e 02ba 	CALL __LOADLOCR4
00009f 9628      	ADIW R28,8
0000a0 9508      	RET
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input) {
                 ; 0000 001A unsigned int read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; 0000 001B 	ADMUX = adc_input | ADC_VREF_TYPE;
0000a1 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000a2 81e8      	LD   R30,Y
0000a3 64e0      	ORI  R30,0x40
0000a4 b9e7      	OUT  0x7,R30
                 ; 0000 001C 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001D 	delay_us(10);
                +
0000a5 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000a6 958a     +DEC R24
0000a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001E 	// Start the AD conversion
                 ; 0000 001F 	ADCSRA |= (1 << ADSC);
0000a8 9a36      	SBI  0x6,6
                 ; 0000 0020 	// Wait for the AD conversion to complete
                 ; 0000 0021 	while ((ADCSRA & (1 << ADIF)) == 0);
                 _0x3:
0000a9 9b34      	SBIS 0x6,4
0000aa cffe      	RJMP _0x3
                 ; 0000 0022 	ADCSRA |= (1 << ADIF);
0000ab 9a34      	SBI  0x6,4
                 ; 0000 0023 	return ADCW;
0000ac b1e4      	IN   R30,0x4
0000ad b1f5      	IN   R31,0x4+1
0000ae c0c6      	RJMP _0x2020001
                 ; 0000 0024 }
                 ;
                 ;void main(void) {
                 ; 0000 0026 void main(void) {
                 _main:
                 ; 0000 0027 	int temprature;
                 ; 0000 0028 
                 ; 0000 0029 	PORTA=0x00;
                 ;	temprature -> R16,R17
0000af e0e0      	LDI  R30,LOW(0)
0000b0 bbeb      	OUT  0x1B,R30
                 ; 0000 002A 	DDRA=0x00;
0000b1 bbea      	OUT  0x1A,R30
                 ; 0000 002B 	PORTB=0x00;
0000b2 bbe8      	OUT  0x18,R30
                 ; 0000 002C 	DDRB=0x00;
0000b3 bbe7      	OUT  0x17,R30
                 ; 0000 002D 	PORTC=0x00;
0000b4 bbe5      	OUT  0x15,R30
                 ; 0000 002E 	DDRC=0x00;
0000b5 bbe4      	OUT  0x14,R30
                 ; 0000 002F 	PORTD=0x00;
0000b6 bbe2      	OUT  0x12,R30
                 ; 0000 0030 	DDRD=0x00;
0000b7 bbe1      	OUT  0x11,R30
                 ; 0000 0031 
                 ; 0000 0032 	// ADC initialization
                 ; 0000 0033 	// ADC Clock frequency: 250.000 kHz
                 ; 0000 0034 	// ADC Voltage Reference: AVCC pin
                 ; 0000 0035 	// ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0036 	ADMUX |= (1<<MUX0);
0000b8 9a38      	SBI  0x7,0
                 ; 0000 0037 	//ADMUX=ADC_VREF_TYPE;
                 ; 0000 0038 	ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0000b9 e8e5      	LDI  R30,LOW(133)
0000ba b9e6      	OUT  0x6,R30
                 ; 0000 0039 	SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000bb e0e0      	LDI  R30,LOW(0)
0000bc bfe0      	OUT  0x30,R30
                 ; 0000 003A 
                 ; 0000 003B 	lcd_init(16);
0000bd e1a0      	LDI  R26,LOW(16)
0000be d08f      	RCALL _lcd_init
                 ; 0000 003C 
                 ; 0000 003D     lcd_gotoxy(3, 0);
0000bf e0e3      	LDI  R30,LOW(3)
0000c0 93ea      	ST   -Y,R30
0000c1 e0a0      	LDI  R26,LOW(0)
0000c2 d04b      	RCALL _lcd_gotoxy
                 ; 0000 003E     lcd_puts("LM35 Sensor");
                +
0000c3 e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000c4 e0b2     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000c5 d077      	RCALL _lcd_puts
                 ; 0000 003F 
                 ; 0000 0040     lcd_gotoxy(2, 1);
0000c6 e0e2      	LDI  R30,LOW(2)
0000c7 d0af      	RCALL SUBOPT_0x0
                 ; 0000 0041     lcd_puts("Temp :");
                +
0000c8 e6ac     +LDI R26 , LOW ( _0x6 + ( 12 ) )
0000c9 e0b2     +LDI R27 , HIGH ( _0x6 + ( 12 ) )
                 	__POINTW2MN _0x6,12
0000ca d072      	RCALL _lcd_puts
                 ; 0000 0042 
                 ; 0000 0043     lcd_gotoxy(12, 1);
0000cb e0ec      	LDI  R30,LOW(12)
0000cc d0aa      	RCALL SUBOPT_0x0
                 ; 0000 0044     lcd_putchar(223);
0000cd edaf      	LDI  R26,LOW(223)
0000ce d05a      	RCALL _lcd_putchar
                 ; 0000 0045 
                 ; 0000 0046     lcd_gotoxy(13, 1);
0000cf e0ed      	LDI  R30,LOW(13)
0000d0 d0a6      	RCALL SUBOPT_0x0
                 ; 0000 0047     lcd_puts("C");
                +
0000d1 e7a3     +LDI R26 , LOW ( _0x6 + ( 19 ) )
0000d2 e0b2     +LDI R27 , HIGH ( _0x6 + ( 19 ) )
                 	__POINTW2MN _0x6,19
0000d3 d069      	RCALL _lcd_puts
                 ; 0000 0048 
                 ; 0000 0049     while (1) {
                 _0x7:
                 ; 0000 004A         temprature = read_adc(0);
0000d4 e0a0      	LDI  R26,LOW(0)
0000d5 dfcb      	RCALL _read_adc
0000d6 018f      	MOVW R16,R30
                 ; 0000 004B         temprature = temprature * 0.48898;
0000d7 01f8      	MOVW R30,R16
0000d8 940e 027c 	CALL __CWD1
0000da 940e 01f4 	CALL __CDF1
                +
0000dc e9a6     +LDI R26 , LOW ( 0x3EFA5B96 )
0000dd e5bb     +LDI R27 , HIGH ( 0x3EFA5B96 )
0000de ef8a     +LDI R24 , BYTE3 ( 0x3EFA5B96 )
0000df e39e     +LDI R25 , BYTE4 ( 0x3EFA5B96 )
                 	__GETD2N 0x3EFA5B96
0000e0 940e 0222 	CALL __MULF12
0000e2 940e 01bd 	CALL __CFD1
0000e4 018f      	MOVW R16,R30
                 ; 0000 004C         put_on_lcd(temprature, 9);
0000e5 931a      	ST   -Y,R17
0000e6 930a      	ST   -Y,R16
0000e7 e0a9      	LDI  R26,LOW(9)
0000e8 e0b0      	LDI  R27,0
0000e9 df8e      	RCALL _put_on_lcd
                 ; 0000 004D         delay_ms(100);
0000ea e6a4      	LDI  R26,LOW(100)
0000eb d08e      	RCALL SUBOPT_0x1
                 ; 0000 004E     }
0000ec cfe7      	RJMP _0x7
                 ; 0000 004F }
                 _0xA:
0000ed cfff      	RJMP _0xA
                 
                 	.DSEG
                 _0x6:
000260           	.BYTE 0x15
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0000ee 93aa      	ST   -Y,R26
0000ef b3e5      	IN   R30,0x15
0000f0 70ef      	ANDI R30,LOW(0xF)
0000f1 2fae      	MOV  R26,R30
0000f2 81e8      	LD   R30,Y
0000f3 7fe0      	ANDI R30,LOW(0xF0)
0000f4 2bea      	OR   R30,R26
0000f5 bbe5      	OUT  0x15,R30
                +
0000f6 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0000f7 958a     +DEC R24
0000f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0000f9 9aaa      	SBI  0x15,2
                +
0000fa e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fb 958a     +DEC R24
0000fc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fd 98aa      	CBI  0x15,2
                +
0000fe e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ff 958a     +DEC R24
000100 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000101 c073      	RJMP _0x2020001
                 __lcd_write_data:
000102 93aa      	ST   -Y,R26
000103 81a8      	LD   R26,Y
000104 dfe9      	RCALL __lcd_write_nibble_G100
000105 81e8          ld    r30,y
000106 95e2          swap  r30
000107 83e8          st    y,r30
000108 81a8      	LD   R26,Y
000109 dfe4      	RCALL __lcd_write_nibble_G100
                +
00010a e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00010b 958a     +DEC R24
00010c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00010d c067      	RJMP _0x2020001
                 _lcd_gotoxy:
00010e 93aa      	ST   -Y,R26
00010f 81e8      	LD   R30,Y
000110 e0f0      	LDI  R31,0
000111 58eb      	SUBI R30,LOW(-__base_y_G100)
000112 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000113 81e0      	LD   R30,Z
000114 81a9      	LDD  R26,Y+1
000115 0fae      	ADD  R26,R30
000116 dfeb      	RCALL __lcd_write_data
000117 8059      	LDD  R5,Y+1
000118 8048      	LDD  R4,Y+0
                 _0x2020002:
000119 9622      	ADIW R28,2
00011a 9508      	RET
                 _lcd_clear:
00011b e0a2      	LDI  R26,LOW(2)
00011c dfe5      	RCALL __lcd_write_data
00011d e0a3      	LDI  R26,LOW(3)
00011e d05b      	RCALL SUBOPT_0x1
00011f e0ac      	LDI  R26,LOW(12)
000120 dfe1      	RCALL __lcd_write_data
000121 e0a1      	LDI  R26,LOW(1)
000122 dfdf      	RCALL __lcd_write_data
000123 e0a3      	LDI  R26,LOW(3)
000124 d055      	RCALL SUBOPT_0x1
000125 e0e0      	LDI  R30,LOW(0)
000126 2e4e      	MOV  R4,R30
000127 2e5e      	MOV  R5,R30
000128 9508      	RET
                 _lcd_putchar:
000129 93aa      	ST   -Y,R26
00012a 81a8      	LD   R26,Y
00012b 30aa      	CPI  R26,LOW(0xA)
00012c f011      	BREQ _0x2000005
00012d 1457      	CP   R5,R7
00012e f040      	BRLO _0x2000004
                 _0x2000005:
00012f e0e0      	LDI  R30,LOW(0)
000130 93ea      	ST   -Y,R30
000131 9443      	INC  R4
000132 2da4      	MOV  R26,R4
000133 dfda      	RCALL _lcd_gotoxy
000134 81a8      	LD   R26,Y
000135 30aa      	CPI  R26,LOW(0xA)
000136 f1f1      	BREQ _0x2020001
                 _0x2000004:
000137 9453      	INC  R5
000138 9aa8      	SBI  0x15,0
000139 81a8      	LD   R26,Y
00013a dfc7      	RCALL __lcd_write_data
00013b 98a8      	CBI  0x15,0
00013c c038      	RJMP _0x2020001
                 _lcd_puts:
00013d 93ba      	ST   -Y,R27
00013e 93aa      	ST   -Y,R26
00013f 931a      	ST   -Y,R17
                 _0x2000008:
000140 81a9      	LDD  R26,Y+1
000141 81ba      	LDD  R27,Y+1+1
000142 91ed      	LD   R30,X+
000143 83a9      	STD  Y+1,R26
000144 83ba      	STD  Y+1+1,R27
000145 2f1e      	MOV  R17,R30
000146 30e0      	CPI  R30,0
000147 f019      	BREQ _0x200000A
000148 2fa1      	MOV  R26,R17
000149 dfdf      	RCALL _lcd_putchar
00014a cff5      	RJMP _0x2000008
                 _0x200000A:
00014b 8118      	LDD  R17,Y+0
00014c 9623      	ADIW R28,3
00014d 9508      	RET
                 _lcd_init:
00014e 93aa      	ST   -Y,R26
00014f b3e4      	IN   R30,0x14
000150 6fe0      	ORI  R30,LOW(0xF0)
000151 bbe4      	OUT  0x14,R30
000152 9aa2      	SBI  0x14,2
000153 9aa0      	SBI  0x14,0
000154 9aa1      	SBI  0x14,1
000155 98aa      	CBI  0x15,2
000156 98a8      	CBI  0x15,0
000157 98a9      	CBI  0x15,1
000158 8078      	LDD  R7,Y+0
000159 81e8      	LD   R30,Y
00015a 58e0      	SUBI R30,-LOW(128)
                +
00015b 93e0 0277+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015d 81e8      	LD   R30,Y
00015e 54e0      	SUBI R30,-LOW(192)
                +
00015f 93e0 0278+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000161 e1a4      	LDI  R26,LOW(20)
000162 d017      	RCALL SUBOPT_0x1
000163 d019      	RCALL SUBOPT_0x2
000164 d018      	RCALL SUBOPT_0x2
000165 d017      	RCALL SUBOPT_0x2
000166 e2a0      	LDI  R26,LOW(32)
000167 df86      	RCALL __lcd_write_nibble_G100
                +
000168 ec88     +LDI R24 , LOW ( 200 )
000169 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00016a 9701     +SBIW R24 , 1
00016b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00016c e2a8      	LDI  R26,LOW(40)
00016d df94      	RCALL __lcd_write_data
00016e e0a4      	LDI  R26,LOW(4)
00016f df92      	RCALL __lcd_write_data
000170 e8a5      	LDI  R26,LOW(133)
000171 df90      	RCALL __lcd_write_data
000172 e0a6      	LDI  R26,LOW(6)
000173 df8e      	RCALL __lcd_write_data
000174 dfa6      	RCALL _lcd_clear
                 _0x2020001:
000175 9621      	ADIW R28,1
000176 9508      	RET
                 
                 	.DSEG
                 __base_y_G100:
000275           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000177 93ea      	ST   -Y,R30
000178 e0a1      	LDI  R26,LOW(1)
000179 cf94      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00017a e0b0      	LDI  R27,0
00017b 940c 0184 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00017d e3a0      	LDI  R26,LOW(48)
00017e df6f      	RCALL __lcd_write_nibble_G100
                +
00017f ec88     +LDI R24 , LOW ( 200 )
000180 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000181 9701     +SBIW R24 , 1
000182 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000183 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000184 9610      	adiw r26,0
000185 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000186 ed80     +LDI R24 , LOW ( 0x7D0 )
000187 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000188 9701     +SBIW R24 , 1
000189 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00018a 95a8      	wdr
00018b 9711      	sbiw r26,1
00018c f7c9      	brne __delay_ms0
                 __delay_ms1:
00018d 9508      	ret
                 
                 __ROUND_REPACK:
00018e 2355      	TST  R21
00018f f442      	BRPL __REPACK
000190 3850      	CPI  R21,0x80
000191 f411      	BRNE __ROUND_REPACK0
000192 ffe0      	SBRS R30,0
000193 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000194 9631      	ADIW R30,1
000195 1f69      	ADC  R22,R25
000196 1f79      	ADC  R23,R25
000197 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000198 e850      	LDI  R21,0x80
000199 2757      	EOR  R21,R23
00019a f411      	BRNE __REPACK0
00019b 935f      	PUSH R21
00019c c073      	RJMP __ZERORES
                 __REPACK0:
00019d 3f5f      	CPI  R21,0xFF
00019e f031      	BREQ __REPACK1
00019f 0f66      	LSL  R22
0001a0 0c00      	LSL  R0
0001a1 9557      	ROR  R21
0001a2 9567      	ROR  R22
0001a3 2f75      	MOV  R23,R21
0001a4 9508      	RET
                 __REPACK1:
0001a5 935f      	PUSH R21
0001a6 2000      	TST  R0
0001a7 f00a      	BRMI __REPACK2
0001a8 c073      	RJMP __MAXRES
                 __REPACK2:
0001a9 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0001aa e850      	LDI  R21,0x80
0001ab 2e19      	MOV  R1,R25
0001ac 2215      	AND  R1,R21
0001ad 0f88      	LSL  R24
0001ae 1f99      	ROL  R25
0001af 2795      	EOR  R25,R21
0001b0 0f55      	LSL  R21
0001b1 9587      	ROR  R24
                 
                 __UNPACK1:
0001b2 e850      	LDI  R21,0x80
0001b3 2e07      	MOV  R0,R23
0001b4 2205      	AND  R0,R21
0001b5 0f66      	LSL  R22
0001b6 1f77      	ROL  R23
0001b7 2775      	EOR  R23,R21
0001b8 0f55      	LSL  R21
0001b9 9567      	ROR  R22
0001ba 9508      	RET
                 
                 __CFD1U:
0001bb 9468      	SET
0001bc c001      	RJMP __CFD1U0
                 __CFD1:
0001bd 94e8      	CLT
                 __CFD1U0:
0001be 935f      	PUSH R21
0001bf dff2      	RCALL __UNPACK1
0001c0 3870      	CPI  R23,0x80
0001c1 f018      	BRLO __CFD10
0001c2 3f7f      	CPI  R23,0xFF
0001c3 f408      	BRCC __CFD10
0001c4 c04b      	RJMP __ZERORES
                 __CFD10:
0001c5 e156      	LDI  R21,22
0001c6 1b57      	SUB  R21,R23
0001c7 f4aa      	BRPL __CFD11
0001c8 9551      	NEG  R21
0001c9 3058      	CPI  R21,8
0001ca f40e      	BRTC __CFD19
0001cb 3059      	CPI  R21,9
                 __CFD19:
0001cc f030      	BRLO __CFD17
0001cd efef      	SER  R30
0001ce efff      	SER  R31
0001cf ef6f      	SER  R22
0001d0 e77f      	LDI  R23,0x7F
0001d1 f977      	BLD  R23,7
0001d2 c01a      	RJMP __CFD15
                 __CFD17:
0001d3 2777      	CLR  R23
0001d4 2355      	TST  R21
0001d5 f0b9      	BREQ __CFD15
                 __CFD18:
0001d6 0fee      	LSL  R30
0001d7 1fff      	ROL  R31
0001d8 1f66      	ROL  R22
0001d9 1f77      	ROL  R23
0001da 955a      	DEC  R21
0001db f7d1      	BRNE __CFD18
0001dc c010      	RJMP __CFD15
                 __CFD11:
0001dd 2777      	CLR  R23
                 __CFD12:
0001de 3058      	CPI  R21,8
0001df f028      	BRLO __CFD13
0001e0 2fef      	MOV  R30,R31
0001e1 2ff6      	MOV  R31,R22
0001e2 2f67      	MOV  R22,R23
0001e3 5058      	SUBI R21,8
0001e4 cff9      	RJMP __CFD12
                 __CFD13:
0001e5 2355      	TST  R21
0001e6 f031      	BREQ __CFD15
                 __CFD14:
0001e7 9576      	LSR  R23
0001e8 9567      	ROR  R22
0001e9 95f7      	ROR  R31
0001ea 95e7      	ROR  R30
0001eb 955a      	DEC  R21
0001ec f7d1      	BRNE __CFD14
                 __CFD15:
0001ed 2000      	TST  R0
0001ee f40a      	BRPL __CFD16
0001ef d084      	RCALL __ANEGD1
                 __CFD16:
0001f0 915f      	POP  R21
0001f1 9508      	RET
                 
                 __CDF1U:
0001f2 9468      	SET
0001f3 c001      	RJMP __CDF1U0
                 __CDF1:
0001f4 94e8      	CLT
                 __CDF1U0:
0001f5 9730      	SBIW R30,0
0001f6 4060      	SBCI R22,0
0001f7 4070      	SBCI R23,0
0001f8 f0b1      	BREQ __CDF10
0001f9 2400      	CLR  R0
0001fa f026      	BRTS __CDF11
0001fb 2377      	TST  R23
0001fc f412      	BRPL __CDF11
0001fd 9400      	COM  R0
0001fe d075      	RCALL __ANEGD1
                 __CDF11:
0001ff 2e17      	MOV  R1,R23
000200 e17e      	LDI  R23,30
000201 2011      	TST  R1
                 __CDF12:
000202 f032      	BRMI __CDF13
000203 957a      	DEC  R23
000204 0fee      	LSL  R30
000205 1fff      	ROL  R31
000206 1f66      	ROL  R22
000207 1c11      	ROL  R1
000208 cff9      	RJMP __CDF12
                 __CDF13:
000209 2fef      	MOV  R30,R31
00020a 2ff6      	MOV  R31,R22
00020b 2d61      	MOV  R22,R1
00020c 935f      	PUSH R21
00020d df8a      	RCALL __REPACK
00020e 915f      	POP  R21
                 __CDF10:
00020f 9508      	RET
                 
                 __ZERORES:
000210 27ee      	CLR  R30
000211 27ff      	CLR  R31
000212 2766      	CLR  R22
000213 2777      	CLR  R23
000214 915f      	POP  R21
000215 9508      	RET
                 
                 __MINRES:
000216 efef      	SER  R30
000217 efff      	SER  R31
000218 e76f      	LDI  R22,0x7F
000219 ef7f      	SER  R23
00021a 915f      	POP  R21
00021b 9508      	RET
                 
                 __MAXRES:
00021c efef      	SER  R30
00021d efff      	SER  R31
00021e e76f      	LDI  R22,0x7F
00021f e77f      	LDI  R23,0x7F
000220 915f      	POP  R21
000221 9508      	RET
                 
                 __MULF12:
000222 935f      	PUSH R21
000223 df86      	RCALL __UNPACK
000224 3870      	CPI  R23,0x80
000225 f351      	BREQ __ZERORES
000226 3890      	CPI  R25,0x80
000227 f341      	BREQ __ZERORES
000228 2401      	EOR  R0,R1
000229 9408      	SEC
00022a 1f79      	ADC  R23,R25
00022b f423      	BRVC __MULF124
00022c f31c      	BRLT __ZERORES
                 __MULF125:
00022d 2000      	TST  R0
00022e f33a      	BRMI __MINRES
00022f cfec      	RJMP __MAXRES
                 __MULF124:
000230 920f      	PUSH R0
000231 931f      	PUSH R17
000232 932f      	PUSH R18
000233 933f      	PUSH R19
000234 934f      	PUSH R20
000235 2711      	CLR  R17
000236 2722      	CLR  R18
000237 2799      	CLR  R25
000238 9f68      	MUL  R22,R24
000239 01a0      	MOVW R20,R0
00023a 9f8f      	MUL  R24,R31
00023b 2d30      	MOV  R19,R0
00023c 0d41      	ADD  R20,R1
00023d 1f59      	ADC  R21,R25
00023e 9f6b      	MUL  R22,R27
00023f 0d30      	ADD  R19,R0
000240 1d41      	ADC  R20,R1
000241 1f59      	ADC  R21,R25
000242 9f8e      	MUL  R24,R30
000243 d027      	RCALL __MULF126
000244 9fbf      	MUL  R27,R31
000245 d025      	RCALL __MULF126
000246 9f6a      	MUL  R22,R26
000247 d023      	RCALL __MULF126
000248 9fbe      	MUL  R27,R30
000249 d01d      	RCALL __MULF127
00024a 9faf      	MUL  R26,R31
00024b d01b      	RCALL __MULF127
00024c 9fae      	MUL  R26,R30
00024d 0d11      	ADD  R17,R1
00024e 1f29      	ADC  R18,R25
00024f 1f39      	ADC  R19,R25
000250 1f49      	ADC  R20,R25
000251 1f59      	ADC  R21,R25
000252 2fe3      	MOV  R30,R19
000253 2ff4      	MOV  R31,R20
000254 2f65      	MOV  R22,R21
000255 2f52      	MOV  R21,R18
000256 914f      	POP  R20
000257 913f      	POP  R19
000258 912f      	POP  R18
000259 911f      	POP  R17
00025a 900f      	POP  R0
00025b 2366      	TST  R22
00025c f02a      	BRMI __MULF122
00025d 0f55      	LSL  R21
00025e 1fee      	ROL  R30
00025f 1fff      	ROL  R31
000260 1f66      	ROL  R22
000261 c002      	RJMP __MULF123
                 __MULF122:
000262 9573      	INC  R23
000263 f24b      	BRVS __MULF125
                 __MULF123:
000264 df29      	RCALL __ROUND_REPACK
000265 915f      	POP  R21
000266 9508      	RET
                 
                 __MULF127:
000267 0d10      	ADD  R17,R0
000268 1d21      	ADC  R18,R1
000269 1f39      	ADC  R19,R25
00026a c002      	RJMP __MULF128
                 __MULF126:
00026b 0d20      	ADD  R18,R0
00026c 1d31      	ADC  R19,R1
                 __MULF128:
00026d 1f49      	ADC  R20,R25
00026e 1f59      	ADC  R21,R25
00026f 9508      	RET
                 
                 __ANEGW1:
000270 95f1      	NEG  R31
000271 95e1      	NEG  R30
000272 40f0      	SBCI R31,0
000273 9508      	RET
                 
                 __ANEGD1:
000274 95f0      	COM  R31
000275 9560      	COM  R22
000276 9570      	COM  R23
000277 95e1      	NEG  R30
000278 4fff      	SBCI R31,-1
000279 4f6f      	SBCI R22,-1
00027a 4f7f      	SBCI R23,-1
00027b 9508      	RET
                 
                 __CWD1:
00027c 2f6f      	MOV  R22,R31
00027d 0f66      	ADD  R22,R22
00027e 0b66      	SBC  R22,R22
00027f 2f76      	MOV  R23,R22
000280 9508      	RET
                 
                 __DIVW21U:
000281 2400      	CLR  R0
000282 2411      	CLR  R1
000283 e190      	LDI  R25,16
                 __DIVW21U1:
000284 0faa      	LSL  R26
000285 1fbb      	ROL  R27
000286 1c00      	ROL  R0
000287 1c11      	ROL  R1
000288 1a0e      	SUB  R0,R30
000289 0a1f      	SBC  R1,R31
00028a f418      	BRCC __DIVW21U2
00028b 0e0e      	ADD  R0,R30
00028c 1e1f      	ADC  R1,R31
00028d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00028e 60a1      	SBR  R26,1
                 __DIVW21U3:
00028f 959a      	DEC  R25
000290 f799      	BRNE __DIVW21U1
000291 01fd      	MOVW R30,R26
000292 01d0      	MOVW R26,R0
000293 9508      	RET
                 
                 __DIVW21:
000294 d012      	RCALL __CHKSIGNW
000295 dfeb      	RCALL __DIVW21U
000296 f40e      	BRTC __DIVW211
000297 dfd8      	RCALL __ANEGW1
                 __DIVW211:
000298 9508      	RET
                 
                 __MODW21:
000299 94e8      	CLT
00029a ffb7      	SBRS R27,7
00029b c004      	RJMP __MODW211
00029c 95a0      	COM  R26
00029d 95b0      	COM  R27
00029e 9611      	ADIW R26,1
00029f 9468      	SET
                 __MODW211:
0002a0 fdf7      	SBRC R31,7
0002a1 dfce      	RCALL __ANEGW1
0002a2 dfde      	RCALL __DIVW21U
0002a3 01fd      	MOVW R30,R26
0002a4 f40e      	BRTC __MODW212
0002a5 dfca      	RCALL __ANEGW1
                 __MODW212:
0002a6 9508      	RET
                 
                 __CHKSIGNW:
0002a7 94e8      	CLT
0002a8 fff7      	SBRS R31,7
0002a9 c002      	RJMP __CHKSW1
0002aa dfc5      	RCALL __ANEGW1
0002ab 9468      	SET
                 __CHKSW1:
0002ac ffb7      	SBRS R27,7
0002ad c006      	RJMP __CHKSW2
0002ae 95a0      	COM  R26
0002af 95b0      	COM  R27
0002b0 9611      	ADIW R26,1
0002b1 f800      	BLD  R0,0
0002b2 9403      	INC  R0
0002b3 fa00      	BST  R0,0
                 __CHKSW2:
0002b4 9508      	RET
                 
                 __SAVELOCR4:
0002b5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002b6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002b7 931a      	ST   -Y,R17
0002b8 930a      	ST   -Y,R16
0002b9 9508      	RET
                 
                 __LOADLOCR4:
0002ba 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002bb 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002bc 8119      	LDD  R17,Y+1
0002bd 8108      	LD   R16,Y
0002be 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  28 r1 :  17 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   9 r17:  13 r18:  11 r19:  12 r20:   8 r21:  44 r22:  33 r23:  30 
r24:  29 r25:  25 r26:  72 r27:  23 r28:   5 r29:   1 r30: 108 r31:  35 
x  :   4 y  :  56 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   8 
adiw  :   8 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   1 brmi  :   4 brne  :  17 brpl  :   4 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :   8 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   1 cpc   :   0 cpi   :  12 cpse  :   0 dec   :  10 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  23 ld    :  15 ldd   :  16 ldi   :  81 
lds   :   0 lpm   :   7 lsl   :  10 lsr   :   1 mov   :  29 movw  :  12 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  21 pop   :  11 push  :  10 rcall :  58 ret   :  25 
reti  :   0 rjmp  :  29 rol   :  14 ror   :   7 sbc   :   2 sbci  :   7 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :   8 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   2 sts   :   2 sub   :   2 subi  :   6 swap  :   1 
tst   :   9 wdr   :   1 
Instructions used: 70 out of 116 (60.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00057e   1356     50   1406   32768   4.3%
[.dseg] 0x000060 0x000279      0     25     25    2143   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
