
AVRASM ver. 2.1.30  C:\Users\ali_s\Desktop\AVR Projects\A-10\List\A10.asm Sat Dec 18 02:07:05 2021

C:\Users\ali_s\Desktop\AVR Projects\A-10\List\A10.asm(1072): warning: Register r5 already defined by the .DEF directive
C:\Users\ali_s\Desktop\AVR Projects\A-10\List\A10.asm(1073): warning: Register r4 already defined by the .DEF directive
C:\Users\ali_s\Desktop\AVR Projects\A-10\List\A10.asm(1074): warning: Register r7 already defined by the .DEF directive
C:\Users\ali_s\Desktop\AVR Projects\A-10\List\A10.asm(1075): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 006c 	JMP  _ext_int0_isr
000004 940c 0076 	JMP  _ext_int1_isr
000006 940c 0083 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0xC:
C:\Users\ali_s\Desktop\AVR Projects\A-10\List\A10.asm(1107): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 _0x2000003:
00002b c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\ali_s\Desktop\AVR Projects\A-10\List\A10.asm(1111): warning: .cseg .db misalignment - padding zero byte
00002c 0001      	.DB  0x1
                 _0x2020000:
00002d 4e2d
00002e 4e41
00002f 4900
000030 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ali_s\Desktop\AVR Projects\A-10\List\A10.asm(1114): warning: .cseg .db misalignment - padding zero byte
000031 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000032 0001      	.DW  0x01
000033 0005      	.DW  0x05
000034 0054      	.DW  _0xC*2
                 
000035 0002      	.DW  0x02
000036 0260      	.DW  __base_y_G100
000037 0056      	.DW  _0x2000003*2
                 
000038 0001      	.DW  0x01
000039 0264      	.DW  __seed_G101
00003a 0058      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000043 e1f8      	LDI  R31,0x18
000044 bdf1      	OUT  WDTCR,R31
000045 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,(14-2)+1
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004f 93ed      	ST   X+,R30
000050 9701      	SBIW R24,1
000051 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000052 e6e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000053 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000054 9185      	LPM  R24,Z+
000055 9195      	LPM  R25,Z+
000056 9700      	SBIW R24,0
000057 f061      	BREQ __GLOBAL_INI_END
000058 91a5      	LPM  R26,Z+
000059 91b5      	LPM  R27,Z+
00005a 9005      	LPM  R0,Z+
00005b 9015      	LPM  R1,Z+
00005c 01bf      	MOVW R22,R30
00005d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005e 9005      	LPM  R0,Z+
00005f 920d      	ST   X+,R0
000060 9701      	SBIW R24,1
000061 f7e1      	BRNE __GLOBAL_INI_LOOP
000062 01fb      	MOVW R30,R22
000063 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a 940c 0090 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;// Ali Sedaghi
                 ;// 97521378
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;signed char a = 0;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) {
                 ; 0000 000B interrupt [2] void ext_int0_isr(void) {
                 
                 	.CSEG
                 _ext_int0_isr:
00006c 93ea      	ST   -Y,R30
00006d b7ef      	IN   R30,SREG
00006e 93ea      	ST   -Y,R30
                 ; 0000 000C 	if (PORTC.3 == 0) {
00006f 99ab      	SBIC 0x15,3
000070 c002      	RJMP _0x3
                 ; 0000 000D 		a += 1;
000071 9453      	INC  R5
                 ; 0000 000E 	}
                 ; 0000 000F 	else {
000072 c002      	RJMP _0x4
                 _0x3:
                 ; 0000 0010 		a += 10;
000073 e0ea      	LDI  R30,LOW(10)
000074 0e5e      	ADD  R5,R30
                 ; 0000 0011 	}
                 _0x4:
                 ; 0000 0012 }
000075 c009      	RJMP _0xB
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void) {
                 ; 0000 0014 interrupt [3] void ext_int1_isr(void) {
                 _ext_int1_isr:
000076 93ea      	ST   -Y,R30
000077 b7ef      	IN   R30,SREG
000078 93ea      	ST   -Y,R30
                 ; 0000 0015 	if (PORTC.3 == 0) {
000079 99ab      	SBIC 0x15,3
00007a c002      	RJMP _0x5
                 ; 0000 0016 		a -= 1;
00007b 945a      	DEC  R5
                 ; 0000 0017 	}
                 ; 0000 0018 	else {
00007c c002      	RJMP _0x6
                 _0x5:
                 ; 0000 0019 		a -= 10;
00007d e0ea      	LDI  R30,LOW(10)
00007e 1a5e      	SUB  R5,R30
                 ; 0000 001A 	}
                 _0x6:
                 ; 0000 001B }
                 _0xB:
00007f 91e9      	LD   R30,Y+
000080 bfef      	OUT  SREG,R30
000081 91e9      	LD   R30,Y+
000082 9518      	RETI
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void) {
                 ; 0000 001D interrupt [4] void ext_int2_isr(void) {
                 _ext_int2_isr:
000083 93aa      	ST   -Y,R26
000084 93ea      	ST   -Y,R30
000085 b7ef      	IN   R30,SREG
000086 93ea      	ST   -Y,R30
                 ; 0000 001E 	PORTC = PORTC ^ (1<<3);
000087 b3e5      	IN   R30,0x15
000088 e0a8      	LDI  R26,LOW(8)
000089 27ea      	EOR  R30,R26
00008a bbe5      	OUT  0x15,R30
                 ; 0000 001F }
00008b 91e9      	LD   R30,Y+
00008c bfef      	OUT  SREG,R30
00008d 91e9      	LD   R30,Y+
00008e 91a9      	LD   R26,Y+
00008f 9518      	RETI
                 ;
                 ;void main(void) {
                 ; 0000 0021 void main(void) {
                 _main:
                 ; 0000 0022 	char *str = 0;
                 ; 0000 0023 
                 ; 0000 0024 	PORTC = 0x00;
                 ;	*str -> R16,R17
                +
000090 e000     +LDI R16 , LOW ( 0 )
000091 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000092 e0e0      	LDI  R30,LOW(0)
000093 bbe5      	OUT  0x15,R30
                 ; 0000 0025 	DDRC = 0x08;
000094 e0e8      	LDI  R30,LOW(8)
000095 bbe4      	OUT  0x14,R30
                 ; 0000 0026 
                 ; 0000 0027 	GICR |= 0xE0;
000096 b7eb      	IN   R30,0x3B
000097 6ee0      	ORI  R30,LOW(0xE0)
000098 bfeb      	OUT  0x3B,R30
                 ; 0000 0028     MCUCR = 0x0A;
000099 e0ea      	LDI  R30,LOW(10)
00009a bfe5      	OUT  0x35,R30
                 ; 0000 0029     MCUCSR = 0x00;
00009b e0e0      	LDI  R30,LOW(0)
00009c bfe4      	OUT  0x34,R30
                 ; 0000 002A     GIFR = 0xE0;
00009d eee0      	LDI  R30,LOW(224)
00009e bfea      	OUT  0x3A,R30
                 ; 0000 002B 
                 ; 0000 002C     lcd_init(16);
00009f e1a0      	LDI  R26,LOW(16)
0000a0 d07c      	RCALL _lcd_init
                 ; 0000 002D 
                 ; 0000 002E     // Global enable interrupts
                 ; 0000 002F     #asm("sei")
0000a1 9478      	sei
                 ; 0000 0030 
                 ; 0000 0031     while (1) {
                 _0x7:
                 ; 0000 0032         lcd_gotoxy(0, 0);
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 93ea      	ST   -Y,R30
0000a4 e0a0      	LDI  R26,LOW(0)
0000a5 d034      	RCALL _lcd_gotoxy
                 ; 0000 0033         itoa(a, str);
0000a6 2de5      	MOV  R30,R5
0000a7 e0f0      	LDI  R31,0
0000a8 fde7      	SBRC R30,7
0000a9 efff      	SER  R31
0000aa 93fa      	ST   -Y,R31
0000ab 93ea      	ST   -Y,R30
0000ac 01d8      	MOVW R26,R16
0000ad 940e 014a 	CALL _itoa
                 ; 0000 0034         lcd_puts(str);
0000af 01d8      	MOVW R26,R16
0000b0 d05b      	RCALL _lcd_puts
                 ; 0000 0035         lcd_putchar(' ');
0000b1 e2a0      	LDI  R26,LOW(32)
0000b2 d044      	RCALL _lcd_putchar
                 ; 0000 0036         lcd_putchar(' ');
0000b3 e2a0      	LDI  R26,LOW(32)
0000b4 d042      	RCALL _lcd_putchar
                 ; 0000 0037         delay_ms(50);
0000b5 e3a2      	LDI  R26,LOW(50)
0000b6 940e 0178 	CALL SUBOPT_0x0
                 ; 0000 0038     }
0000b8 cfe9      	RJMP _0x7
                 ; 0000 0039 }
                 _0xA:
0000b9 cfff      	RJMP _0xA
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0000ba 93aa      	ST   -Y,R26
0000bb b3e5      	IN   R30,0x15
0000bc 70ef      	ANDI R30,LOW(0xF)
0000bd 2fae      	MOV  R26,R30
0000be 81e8      	LD   R30,Y
0000bf 7fe0      	ANDI R30,LOW(0xF0)
0000c0 2bea      	OR   R30,R26
0000c1 bbe5      	OUT  0x15,R30
                +
0000c2 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0000c3 958a     +DEC R24
0000c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0000c5 9aaa      	SBI  0x15,2
                +
0000c6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000c7 958a     +DEC R24
0000c8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000c9 98aa      	CBI  0x15,2
                +
0000ca e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000cb 958a     +DEC R24
0000cc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000cd c07a      	RJMP _0x20A0001
                 __lcd_write_data:
0000ce 93aa      	ST   -Y,R26
0000cf 81a8      	LD   R26,Y
0000d0 dfe9      	RCALL __lcd_write_nibble_G100
0000d1 81e8          ld    r30,y
0000d2 95e2          swap  r30
0000d3 83e8          st    y,r30
0000d4 81a8      	LD   R26,Y
0000d5 dfe4      	RCALL __lcd_write_nibble_G100
                +
0000d6 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000d7 958a     +DEC R24
0000d8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000d9 c06e      	RJMP _0x20A0001
                 _lcd_gotoxy:
0000da 93aa      	ST   -Y,R26
0000db 81e8      	LD   R30,Y
0000dc e0f0      	LDI  R31,0
0000dd 5ae0      	SUBI R30,LOW(-__base_y_G100)
0000de 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0000df 81e0      	LD   R30,Z
0000e0 81a9      	LDD  R26,Y+1
0000e1 0fae      	ADD  R26,R30
0000e2 dfeb      	RCALL __lcd_write_data
0000e3 8049      	LDD  R4,Y+1
0000e4 8078      	LDD  R7,Y+0
0000e5 9622      	ADIW R28,2
0000e6 9508      	RET
                 _lcd_clear:
0000e7 e0a2      	LDI  R26,LOW(2)
0000e8 dfe5      	RCALL __lcd_write_data
0000e9 e0a3      	LDI  R26,LOW(3)
0000ea 940e 0178 	CALL SUBOPT_0x0
0000ec e0ac      	LDI  R26,LOW(12)
0000ed dfe0      	RCALL __lcd_write_data
0000ee e0a1      	LDI  R26,LOW(1)
0000ef dfde      	RCALL __lcd_write_data
0000f0 e0a3      	LDI  R26,LOW(3)
0000f1 940e 0178 	CALL SUBOPT_0x0
0000f3 e0e0      	LDI  R30,LOW(0)
0000f4 2e7e      	MOV  R7,R30
0000f5 2e4e      	MOV  R4,R30
0000f6 9508      	RET
                 _lcd_putchar:
0000f7 93aa      	ST   -Y,R26
0000f8 81a8      	LD   R26,Y
0000f9 30aa      	CPI  R26,LOW(0xA)
0000fa f011      	BREQ _0x2000005
0000fb 1446      	CP   R4,R6
0000fc f048      	BRLO _0x2000004
                 _0x2000005:
0000fd e0e0      	LDI  R30,LOW(0)
0000fe 93ea      	ST   -Y,R30
0000ff 9473      	INC  R7
000100 2da7      	MOV  R26,R7
000101 dfd8      	RCALL _lcd_gotoxy
000102 81a8      	LD   R26,Y
000103 30aa      	CPI  R26,LOW(0xA)
000104 f409      	BRNE _0x2000007
000105 c042      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
000106 9443      	INC  R4
000107 9aa8      	SBI  0x15,0
000108 81a8      	LD   R26,Y
000109 dfc4      	RCALL __lcd_write_data
00010a 98a8      	CBI  0x15,0
00010b c03c      	RJMP _0x20A0001
                 _lcd_puts:
00010c 93ba      	ST   -Y,R27
00010d 93aa      	ST   -Y,R26
00010e 931a      	ST   -Y,R17
                 _0x2000008:
00010f 81a9      	LDD  R26,Y+1
000110 81ba      	LDD  R27,Y+1+1
000111 91ed      	LD   R30,X+
000112 83a9      	STD  Y+1,R26
000113 83ba      	STD  Y+1+1,R27
000114 2f1e      	MOV  R17,R30
000115 30e0      	CPI  R30,0
000116 f019      	BREQ _0x200000A
000117 2fa1      	MOV  R26,R17
000118 dfde      	RCALL _lcd_putchar
000119 cff5      	RJMP _0x2000008
                 _0x200000A:
00011a 8118      	LDD  R17,Y+0
00011b 9623      	ADIW R28,3
00011c 9508      	RET
                 _lcd_init:
00011d 93aa      	ST   -Y,R26
00011e b3e4      	IN   R30,0x14
00011f 6fe0      	ORI  R30,LOW(0xF0)
000120 bbe4      	OUT  0x14,R30
000121 9aa2      	SBI  0x14,2
000122 9aa0      	SBI  0x14,0
000123 9aa1      	SBI  0x14,1
000124 98aa      	CBI  0x15,2
000125 98a8      	CBI  0x15,0
000126 98a9      	CBI  0x15,1
000127 8068      	LDD  R6,Y+0
000128 81e8      	LD   R30,Y
000129 58e0      	SUBI R30,-LOW(128)
                +
00012a 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00012c 81e8      	LD   R30,Y
00012d 54e0      	SUBI R30,-LOW(192)
                +
00012e 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000130 e1a4      	LDI  R26,LOW(20)
000131 940e 0178 	CALL SUBOPT_0x0
000133 940e 017b 	CALL SUBOPT_0x1
000135 940e 017b 	CALL SUBOPT_0x1
000137 940e 017b 	CALL SUBOPT_0x1
000139 e2a0      	LDI  R26,LOW(32)
00013a df7f      	RCALL __lcd_write_nibble_G100
                +
00013b ec88     +LDI R24 , LOW ( 200 )
00013c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00013d 9701     +SBIW R24 , 1
00013e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00013f e2a8      	LDI  R26,LOW(40)
000140 df8d      	RCALL __lcd_write_data
000141 e0a4      	LDI  R26,LOW(4)
000142 df8b      	RCALL __lcd_write_data
000143 e8a5      	LDI  R26,LOW(133)
000144 df89      	RCALL __lcd_write_data
000145 e0a6      	LDI  R26,LOW(6)
000146 df87      	RCALL __lcd_write_data
000147 df9f      	RCALL _lcd_clear
                 _0x20A0001:
000148 9621      	ADIW R28,1
000149 9508      	RET
                 
                 	.CSEG
                 _itoa:
00014a 93ba      	ST   -Y,R27
00014b 93aa      	ST   -Y,R26
00014c 91a9          ld   r26,y+
00014d 91b9          ld   r27,y+
00014e 91e9          ld   r30,y+
00014f 91f9          ld   r31,y+
000150 9630          adiw r30,0
000151 f42a          brpl __itoa0
000152 95e0          com  r30
000153 95f0          com  r31
000154 9631          adiw r30,1
000155 e26d          ldi  r22,'-'
000156 936d          st   x+,r22
                 __itoa0:
000157 94e8          clt
000158 e180          ldi  r24,low(10000)
000159 e297          ldi  r25,high(10000)
00015a d00d          rcall __itoa1
00015b ee88          ldi  r24,low(1000)
00015c e093          ldi  r25,high(1000)
00015d d00a          rcall __itoa1
00015e e684          ldi  r24,100
00015f 2799          clr  r25
000160 d007          rcall __itoa1
000161 e08a          ldi  r24,10
000162 d005          rcall __itoa1
000163 2f6e          mov  r22,r30
000164 d010          rcall __itoa5
000165 2766          clr  r22
000166 936c          st   x,r22
000167 9508          ret
                 
                 __itoa1:
000168 2766          clr	 r22
                 __itoa2:
000169 17e8          cp   r30,r24
00016a 07f9          cpc  r31,r25
00016b f020          brlo __itoa3
00016c 9563          inc  r22
00016d 1be8          sub  r30,r24
00016e 0bf9          sbc  r31,r25
00016f f7c9          brne __itoa2
                 __itoa3:
000170 2366          tst  r22
000171 f411          brne __itoa4
000172 f016          brts __itoa5
000173 9508          ret
                 __itoa4:
000174 9468          set
                 __itoa5:
000175 5d60          subi r22,-0x30
000176 936d          st   x+,r22
000177 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 __seed_G101:
000264           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000178 e0b0      	LDI  R27,0
000179 940c 0183 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00017b e3a0      	LDI  R26,LOW(48)
00017c 940e 00ba 	CALL __lcd_write_nibble_G100
                +
00017e ec88     +LDI R24 , LOW ( 200 )
00017f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000180 9701     +SBIW R24 , 1
000181 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000182 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000183 9610      	adiw r26,0
000184 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000185 ed80     +LDI R24 , LOW ( 0x7D0 )
000186 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000187 9701     +SBIW R24 , 1
000188 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000189 95a8      	wdr
00018a 9711      	sbiw r26,1
00018b f7c9      	brne __delay_ms0
                 __delay_ms1:
00018c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   5 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   3 r17:   5 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  27 r25:  10 r26:  51 r27:   8 r28:   4 r29:   1 r30:  93 r31:  14 
x  :   7 y  :  50 z  :   8 
Registers used: 20 out of 35 (57.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   2 
adiw  :   6 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   9 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   2 cpc   :   1 cpi   :   3 cpse  :   0 dec   :   6 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   4 jmp   :  23 ld    :  21 ldd   :   7 ldi   :  63 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   8 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  19 pop   :   0 push  :   0 rcall :  25 ret   :   9 
reti  :   2 rjmp  :  13 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   5 sbic  :   2 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   1 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   2 sts   :   2 sub   :   2 subi  :   4 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 52 out of 116 (44.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00031a    758     36    794   32768   2.4%
[.dseg] 0x000060 0x000268      0      8      8    2143   0.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
